#!/usr/bin/python

OPT = []

# Get c99 and gnu extensions.
#OPT += ["-std=gnu99 -D_GNU_SOURCE"]
#OPT += ["-std=c++0x"]

# Lots of warnings and make them all errors.
OPT += ["-Wall -Werror"]

# Turn on profiling.
# Run Obsequi
# gprof Obsequi gmon.out | less
#OPT += ["-pg"]

# Only the best optimization for this machine.
OPT += ["-O3 -march=native"]

# Create better debug symbols.
OPT += ["-g -rdynamic"]

# Number of bits used in the zobrist codes.
# Size of the hashtable will be (1 << HASHCODEBITS). 
OPT += ["-DHASHCODEBITS=24"]

# Two stage move generation.
OPT += ["-DTWO_STAGE_GENERATION"]

#assume the board size is less than 16 rows or columns
#OPT:-DBOARD_SIZE_LT_16

#We can generate the possible moves in one or two stages the
# point being less sorting costs, therefore two stage is a little faster.
#Also as an aside it actually helps the move ordering a little
# meaning fewer nodes need to be searched.
#OPT:-DTWO_STAGE_GENERATION

#We have two different ways to induce symmetry in the move ordering
#scheme: dynamic or static.
#OPT:-DDYNAMIC_POSITION_VALUES

# Use following options to improve performance by a couple percent.
#   first to profile.
#   second to recompile with the bonus of the profiling info.
# -fprofile-arcs
# -fbranch-probabilities


import sys

if len(sys.argv) <= 1:
  print " ".join(OPT)
else:
  print "// This file is automatically generated from CPPFLAGS_raw"
  print ""
  print "char option_string[] ="
  for x in OPT:
    print '"' + x + '\\n"'
  print ";"
